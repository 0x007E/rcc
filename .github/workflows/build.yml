name: RCC Build Pipeline

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  export-kicad:
    env:
      BaseFileName: "RCC"
      SchematicFileExtension: "kicad_sch"
      PCBFileExtension: "kicad_pcb"
      OutputFolder: "./output"
      ConfigFilePath: ".kibot/build.kibot.yaml"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v4
    
    - name: Prepare output directory
      run: |
        mkdir -p ${{ env.OutputFolder }}
        cp -r ./pcb ${{ env.OutputFolder }}/kicad
        cp ./LICENSE.md ${{ env.OutputFolder }}

    - name: Run KiBOT
      uses: INTI-CMNB/KiBot@v2_dk7
      with:
        config: ${{ env.ConfigFilePath }}
        dir: ${{ env.OutputFolder }}
        schema: "./pcb/${{ env.BaseFileName }}.${{ env.SchematicFileExtension }}"
        board: "./pcb/${{ env.BaseFileName }}.${{ env.PCBFileExtension }}"

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kicad-export
        path: ${{ env.OutputFolder }}
        retention-days: 1

  export-freecad:
    env:
      FREECADVERSION: "1.0.2"
      FreeCADFileName: "./mechanical/housing.FCStd"
      OutputFolder: "./output"
      PartType: "PartDesign::Body"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v4
    
    - name: Prepare output directory
      run: |
        mkdir -p ${{ env.OutputFolder }}
        cp -r ./mechanical ${{ env.OutputFolder }}
        cp ./LICENSE.md ${{ env.OutputFolder }}

    - name: Install FreeCAD
      run: |
          wget https://github.com/FreeCAD/FreeCAD/releases/download/${{ env.FREECADVERSION }}/FreeCAD_${{ env.FREECADVERSION }}-conda-Linux-x86_64-py311.AppImage
          chmod 0777 FreeCAD_${{ env.FREECADVERSION }}-conda-Linux-x86_64-py311.AppImage
          ./FreeCAD_${{ env.FREECADVERSION }}-conda-Linux-x86_64-py311.AppImage --appimage-extract
    - name: Get FreeCAD Export
      run: |
          git clone https://github.com/0x007E/pyfreecadexport.git
    - name: Export STEP Files
      run: |
          ./squashfs-root/usr/bin/python ./pyfreecadexport/src/pyfreecadexport.py -f "${{ env.FreeCADFileName }}" -p "${{ env.PartType }}" -d "${{ env.OutputFolder }}" -e "step" -l "squashfs-root/usr/lib/"
          ./squashfs-root/usr/bin/python ./pyfreecadexport/src/pyfreecadexport.py -f "${{ env.FreeCADFileName }}" -p "${{ env.PartType }}" -d "${{ env.OutputFolder }}" -e "stl" -l "squashfs-root/usr/lib/"
    
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: freecad-export
        path: ${{ env.OutputFolder }}
        retention-days: 1

  build-firmware:
    env:
      TOOLCHAIN: "3.7.0.1796"
      DFP: "ATtiny_DFP.2.0.368"
      DEVICE: "attiny402"
      OUTPUT_FOLDER: "./output"
      LIBRARY_PATH: "./firmware/RCC_FW_1_0"
      PROJECT_PATH: "./firmware/RCC_FW_1_0"
      FIRMWARE_NAME: "RCC_FW_1_0_t402"
      PREPROCESSOR: "-DF_CPU=20000000UL"
    runs-on: ubuntu-latest
    steps:
    - name: Fetch repository
      uses: actions/checkout@v5
    - name: Copy License
      run: |
          mkdir -p ${{ env.OUTPUT_FOLDER }}
          cp ./LICENSE.md ${{ env.OUTPUT_FOLDER }}
    - name: Install zip
      run: sudo apt-get install -y zip
    - name: install-build-tools
      run: |
          wget https://ww1.microchip.com/downloads/aemDocuments/documents/DEV/ProductDocuments/SoftwareTools/avr8-gnu-toolchain-${{ env.TOOLCHAIN }}-linux.any.x86_64.tar.gz
          tar -xf *.tar.gz
    - name: install-dfp-package
      run: |
          wget http://packs.download.atmel.com/Atmel.${{ env.DFP }}.atpack
          unzip *.atpack -d ./DFP
    - name: build-firmware
      run: |
        mkdir -p temp
        rm -rf ./temp/*

        libraries=""

        while read -r file; do
            filename=$(basename -- "$file")
            filename="${filename%.*}"

            echo "Compiling: ${filename}.c from ${file}"

            ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/${filename}.d" -MT"./temp/${filename}.d" -MT"./temp/${filename}.o" -o "./temp/${filename}.o" "${file}" ${{ env.PREPROCESSOR }}
            
            libraries+="./temp/${filename}.o "
        done < <(find "${LIBRARY_PATH}" -type f -name '*.c')

        if [[ "${{ env.LIBRARY_PATH }}" == "${{ env.PROJECT_PATH }}" ]]; then
          rm -f ./temp/main.*
          libraries=$(echo "$libraries" | sed 's#\./temp/main\.o ##g')
        fi

        echo "Libraries: $libraries"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc  -x c -funsigned-char -funsigned-bitfields -DDEBUG  -I"./DFP/include"  -Og -ffunction-sections -fdata-sections -fpack-struct -fshort-enums -g2 -Wall -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}" -c -std=gnu99 -MD -MP -MF "./temp/main.d" -MT"./temp/main.d" -MT"./temp/main.o" -o "./temp/main.o" "./${{ env.PROJECT_PATH }}/main.c" ${{ env.PREPROCESSOR }}

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-gcc -o "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" ${libraries} ./temp/main.o -Wl,-Map="${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.map" -Wl,--start-group -Wl,-lm -Wl,--end-group -Wl,--gc-sections -mmcu=${{ env.DEVICE }} -B "./DFP/gcc/dev/${{ env.DEVICE }}"

        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures  "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.hex"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -j .eeprom  --set-section-flags=.eeprom=alloc,load --change-section-lma .eeprom=0  --no-change-warnings -O ihex "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.eep" || exit 0
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objdump -h -S "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" > "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.lss"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-objcopy -O srec -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf" "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.srec"
        ./avr8-gnu-toolchain-linux_x86_64/bin/avr-size "${{ env.OUTPUT_FOLDER }}/${{ env.FIRMWARE_NAME }}.elf"

        tar -czvf build.tar.gz ${{ env.OUTPUT_FOLDER }}
        zip -r build.zip ${{ env.OUTPUT_FOLDER }}

    - name: upload-firmware
      uses: actions/upload-artifact@v4
      with:
        name: firmware-build
        path: ${{ env.OUTPUT_FOLDER }}
        retention-days: 1
    
  build_latex_de:
    env:
      DOCUMENT_LANGUAGE: "ngerman"
      LATEX_PATH: "./docs/"
      LATEX_FILENAME: "manual"
    needs: export-kicad
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Git repository
      uses: actions/checkout@v4
    
    - name: Download KiCad Artifacts
      uses: actions/download-artifact@v4
      with:
        name: kicad-export
        path: ./artifact/kicad
    - name: Display structure
      run: ls -R ./artifact/kicad
    - name: Prepare Files
      run: |
        cp ./artifact/kicad/pcb/PCB.pdf ${{ env.LATEX_PATH }}

        sed -i 's/^% \\selectlanguage{${{ env.DOCUMENT_LANGUAGE }}}/\\selectlanguage{${{ env.DOCUMENT_LANGUAGE }}}/' ${{ env.LATEX_PATH }}${{ env.LATEX_FILENAME }}.tex

        mkdir -p ${{ env.LATEX_PATH }}images
        wget -O ${{ env.LATEX_PATH }}images/htl.png https://upload.wikimedia.org/wikipedia/commons/d/d0/HTL_Rankweil_logo.png
        wget -O ${{ env.LATEX_PATH }}images/assembled.png https://raw.githubusercontent.com/0x007E/rcc/refs/heads/main/images/assembled.png
        wget -O ${{ env.LATEX_PATH }}images/explosion.png https://raw.githubusercontent.com/0x007E/rcc/refs/heads/main/images/explosion.png
        wget -O ${{ env.LATEX_PATH }}images/programmer_assembled.png https://raw.githubusercontent.com/0x007E/rcc_programmer/refs/heads/main/images/assembled.png
        wget -O ${{ env.LATEX_PATH }}images/programmer_icon.png https://raw.githubusercontent.com/0x007E/rcc_programmer/refs/heads/main/images/programmer_icon.png
        wget -O ${{ env.LATEX_PATH }}images/programmer_program.png https://raw.githubusercontent.com/0x007E/rcc_programmer/refs/heads/main/images/programmer_program.png
    - name: Compile LaTeX document
      uses: xu-cheng/latex-action@v4
      with:
        root_file: ${{ env.LATEX_FILENAME }}.tex
        texlive_version: 2025
        extra_system_packages: "inkscape"
        #pre_compile: "tlmgr update --self && tlmgr update --all"
        pre_compile: |
          cd ${{ env.LATEX_PATH }}
          latexmk -f -interaction=nonstopmode -shell-escape -pdf ${{ env.LATEX_PATH }}${{ env.LATEX_FILENAME }}.tex || true
        args: "-f -interaction=nonstopmode -shell-escape -pdf"
        latexmk_shell_escape: true
        continue_on_error: true
        post_compile: cd ..
    
    - name: Prepare file(s) for upload
      run: |
        mkdir -p ./output
        cp ${{ env.LATEX_PATH }}${{ env.LATEX_FILENAME }}.pdf ./output/${{ env.LATEX_FILENAME }}.pdf

    - name: upload-latex_de
      uses: actions/upload-artifact@v4
      with:
        name: latex-build_de
        path: ./output
        retention-days: 1
  
  build_latex_en:
    env:
      DOCUMENT_LANGUAGE: "english"
      LATEX_PATH: "./docs/"
      LATEX_FILENAME: "manual"
    needs: export-kicad
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Git repository
      uses: actions/checkout@v4
    
    - name: Download KiCad Artifacts
      uses: actions/download-artifact@v4
      with:
        name: kicad-export
        path: ./artifact/kicad
    - name: Display structure
      run: ls -R ./artifact/kicad
    - name: Prepare Files
      run: |
        cp ./artifact/kicad/pcb/PCB.pdf ${{ env.LATEX_PATH }}

        sed -i 's/^% \\selectlanguage{${{ env.DOCUMENT_LANGUAGE }}}/\\selectlanguage{${{ env.DOCUMENT_LANGUAGE }}}/' ${{ env.LATEX_PATH }}${{ env.LATEX_FILENAME }}.tex

        mkdir -p ${{ env.LATEX_PATH }}images
        wget -O ${{ env.LATEX_PATH }}images/htl.png https://upload.wikimedia.org/wikipedia/commons/d/d0/HTL_Rankweil_logo.png
        wget -O ${{ env.LATEX_PATH }}images/assembled.png https://raw.githubusercontent.com/0x007E/rcc/refs/heads/main/images/assembled.png
        wget -O ${{ env.LATEX_PATH }}images/explosion.png https://raw.githubusercontent.com/0x007E/rcc/refs/heads/main/images/explosion.png
        wget -O ${{ env.LATEX_PATH }}images/programmer_assembled.png https://raw.githubusercontent.com/0x007E/rcc_programmer/refs/heads/main/images/assembled.png
        wget -O ${{ env.LATEX_PATH }}images/programmer_icon.png https://raw.githubusercontent.com/0x007E/rcc_programmer/refs/heads/main/images/programmer_icon.png
        wget -O ${{ env.LATEX_PATH }}images/programmer_program.png https://raw.githubusercontent.com/0x007E/rcc_programmer/refs/heads/main/images/programmer_program.png
    - name: Compile LaTeX document
      uses: xu-cheng/latex-action@v4
      with:
        root_file: ${{ env.LATEX_FILENAME }}.tex
        texlive_version: 2025
        extra_system_packages: "inkscape"
        #pre_compile: "tlmgr update --self && tlmgr update --all"
        pre_compile: |
          cd ${{ env.LATEX_PATH }}
          latexmk -f -interaction=nonstopmode -shell-escape -pdf ${{ env.LATEX_PATH }}${{ env.LATEX_FILENAME }}.tex || true
        args: "-f -interaction=nonstopmode -shell-escape -pdf"
        latexmk_shell_escape: true
        continue_on_error: true
        post_compile: cd ..
    
    - name: Prepare file(s) for upload
      run: |
        mkdir -p ./output
        cp ${{ env.LATEX_PATH }}${{ env.LATEX_FILENAME }}.pdf ./output/${{ env.LATEX_FILENAME }}.pdf

    - name: upload-latex_en
      uses: actions/upload-artifact@v4
      with:
        name: latex-build_en
        path: ./output
        retention-days: 1